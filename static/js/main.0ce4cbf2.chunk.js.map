{"version":3,"sources":["images/github.png","images/todoimg.gif","images/tictactoeimg.gif","images/pokeapiimg.gif","Details/Headlines.jsx","Details/Projects.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Headlines","react_default","a","createElement","className","id","src","githubicon","alt","href","Component","Projects","class","todoimg","pokeapiimg","tictactoeimg","App","Headlines_Headlines","Projects_Projects","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6OCInBC,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAChBH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,0BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BAAd,2BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,qBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BACZH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,MAAMC,IAAKC,IAAYC,IAAI,eAAeP,EAAAC,EAAAC,cAAA,KAAGM,KAAK,gCAAR,gBAGtDR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,qBACAH,EAAAC,EAAAC,cAAA,qBAhB2BO,gECElBC,mLAEjB,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGM,KAAK,yCACNR,EAAAC,EAAAC,cAAA,UAAQE,GAAG,QACTJ,EAAAC,EAAAC,cAAA,cAAYS,MAAM,kBAAlB,eAEAX,EAAAC,EAAAC,cAAA,OACEG,IAAKO,IACLL,IAAI,YACJJ,UAAU,oCAKhBH,EAAAC,EAAAC,cAAA,OAAMC,UAAU,UACdH,EAAAC,EAAAC,cAAA,KAAGM,KAAK,8CACNR,EAAAC,EAAAC,cAAA,UAAQE,GAAG,WACTJ,EAAAC,EAAAC,cAAA,cAAYS,MAAM,kBAAlB,gBACAX,EAAAC,EAAAC,cAAA,OACEG,IAAKQ,IACLN,IAAI,cACJJ,UAAU,oCAKlBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,KAAGM,KAAK,4CACNR,EAAAC,EAAAC,cAAA,UAAQE,GAAG,aACTJ,EAAAC,EAAAC,cAAA,cAAYS,MAAM,kBAAlB,gBACAX,EAAAC,EAAAC,cAAA,OACEG,IAAKS,IACLP,IAAI,cACJJ,UAAU,6CArCYM,aCkBvBM,0LAhBX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,yBAGJH,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,cAXUR,cCMES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0ce4cbf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.9ac279f9.png\";","module.exports = __webpack_public_path__ + \"static/media/todoimg.0d6ac89d.gif\";","module.exports = __webpack_public_path__ + \"static/media/tictactoeimg.6ce8e740.gif\";","module.exports = __webpack_public_path__ + \"static/media/pokeapiimg.6b1e51da.gif\";","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport githubicon from \"../images/github.png\";\r\n\r\nexport default class Headlines extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Headlines\">\r\n        <header className=\"Headlines-header\">\r\n          <p>\r\n            <ul className=\"h5 list-inline smallheadline\">\r\n              <li className=\"list-inline-item\">Creative Front End Dev</li>\r\n              <li className=\"list-inline-item text-info\">Women Who Code Director</li>\r\n              <li className=\"list-inline-item\">UX/UI Enthusiast </li>\r\n              <li className=\"list-inline-item text-info\">\r\n                <img id=\"git\" src={githubicon} alt=\"githubicon\" /><a href=\"https://github.com/justjo120\">justjo120 </a>\r\n              </li>\r\n            </ul>\r\n            <hr />\r\n            <h1 className=\"bigheadline\">ReactJS Projects:</h1>\r\n            <hr />\r\n          </p>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport todoimg from \"../images/todoimg.gif\";\r\nimport tictactoeimg from \"../images/tictactoeimg.gif\";\r\nimport pokeapiimg from \"../images/pokeapiimg.gif\";\r\n\r\nexport default class Projects extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"reactJsProjects container\">\r\n        <div className=\"row\">\r\n        <div className=\"col-sm\">\r\n          <a href=\"https://justjo120.github.io/todolist/\">\r\n            <figure id=\"todo\">\r\n              <figcaption class=\"figure-caption\"> Todo List </figcaption>\r\n\r\n              <img\r\n                src={todoimg}\r\n                alt=\"todo list\"\r\n                className=\"figure-img img-fluid rounded\"\r\n              />\r\n            </figure>\r\n          </a>\r\n          </div>\r\n          <div  className=\"col-sm\">\r\n            <a href=\"https://justjo120.github.io/pokedex-react/\">\r\n              <figure id=\"pokeapi\">\r\n                <figcaption class=\"figure-caption\">Pokedex API </figcaption>\r\n                <img\r\n                  src={pokeapiimg}\r\n                  alt=\"pokemon api\"\r\n                  className=\"figure-img img-fluid rounded\"\r\n                />\r\n              </figure>\r\n            </a>\r\n          </div>\r\n          <div className=\"col-sm\">\r\n          <a href=\"https://justjo120.github.io/tic-tac-toe/\">\r\n            <figure id=\"tictactoe\">\r\n              <figcaption class=\"figure-caption\">Tic Tac Toe </figcaption>\r\n              <img\r\n                src={tictactoeimg}\r\n                alt=\"tic tac toe\"\r\n                className=\"figure-img img-fluid rounded\"\r\n              />\r\n            </figure>\r\n          </a>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Headlines from './Details/Headlines.jsx';\r\nimport Projects from './Details/Projects';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <p>\r\n            <h4 className=\"smallheadline\">Welcome to </h4>\r\n            <h1 className=\"bigheadline\">Johanna's Portfolio</h1>\r\n          </p>\r\n        </header>\r\n        <Headlines />\r\n        <Projects/>\r\n      </div>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}